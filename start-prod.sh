#!/bin/bash

# Script de inicio para PRODUCCI√ìN - Backend-Optimizacion
echo "üöÄ Iniciando Backend-Optimizacion en PRODUCCI√ìN..."

# Verificar si Docker est√° ejecut√°ndose
if ! docker info > /dev/null 2>&1; then
    echo "‚ùå Error: Docker no est√° ejecut√°ndose. Por favor, inicia Docker."
    exit 1
fi

# Verificar si existe el archivo .env
if [ ! -f .env ]; then
    echo "üìù Creando archivo .env desde env.prod.example..."
    cp env.prod.example .env
    echo "‚úÖ Archivo .env creado. ¬°IMPORTANTE: Edita las variables de entorno para producci√≥n!"
fi

# Funci√≥n para mostrar el progreso
show_progress() {
    echo "‚è≥ $1..."
}

# Funci√≥n para mostrar √©xito
show_success() {
    echo "‚úÖ $1"
}

# Funci√≥n para mostrar error
show_error() {
    echo "‚ùå $1"
}

# Construir las im√°genes
show_progress "Construyendo im√°genes Docker para PRODUCCI√ìN"
if docker-compose -f docker-compose.prod.yml build; then
    show_success "Im√°genes construidas correctamente"
else
    show_error "Error al construir las im√°genes"
    exit 1
fi

# Iniciar los servicios de producci√≥n
show_progress "Iniciando servicios de PRODUCCI√ìN"
if docker-compose -f docker-compose.prod.yml up -d; then
    show_success "Servicios de producci√≥n iniciados correctamente"
else
    show_error "Error al iniciar los servicios"
    exit 1
fi

# Esperar un momento para que los servicios se inicialicen
show_progress "Esperando que los servicios se inicialicen"
sleep 15

# Verificar el estado de los contenedores
show_progress "Verificando estado de los contenedores"
if docker-compose -f docker-compose.prod.yml ps | grep -q "Up"; then
    show_success "Todos los contenedores est√°n ejecut√°ndose"
else
    show_error "Algunos contenedores no est√°n ejecut√°ndose"
    echo "üìã Estado de los contenedores:"
    docker-compose -f docker-compose.prod.yml ps
    exit 1
fi

# Mostrar informaci√≥n de acceso
echo ""
echo "üéâ ¬°Backend-Optimizacion est√° ejecut√°ndose en PRODUCCI√ìN!"
echo ""
echo "üì± URLs de acceso:"
echo "   ‚Ä¢ Aplicaci√≥n principal: http://localhost"
echo "   ‚Ä¢ Admin de Django: http://localhost/admin"
echo "   ‚Ä¢ API REST: http://localhost/api/"
echo ""
echo "üîë IMPORTANTE: Configura las credenciales en el archivo .env"
echo ""
echo "üìã Comandos √∫tiles:"
echo "   ‚Ä¢ Ver logs: docker-compose -f docker-compose.prod.yml logs -f"
echo "   ‚Ä¢ Detener servicios: docker-compose -f docker-compose.prod.yml down"
echo "   ‚Ä¢ Reiniciar servicios: docker-compose -f docker-compose.prod.yml restart"
echo "   ‚Ä¢ Acceder al shell: docker-compose -f docker-compose.prod.yml exec web bash"
echo ""
echo "üîç Para ver los logs en tiempo real, ejecuta:"
echo "   docker-compose -f docker-compose.prod.yml logs -f"
echo ""
echo "‚ö†Ô∏è  RECUERDA: Este es un entorno de PRODUCCI√ìN"
echo "   ‚Ä¢ Configura variables de entorno seguras"
echo "   ‚Ä¢ Usa contrase√±as fuertes"
echo "   ‚Ä¢ Configura SSL/TLS"
echo ""
