version: '3.8'

services:
  # Base de datos MySQL para producción
  db:
    image: mysql:8.0
    container_name: reflexo_mysql_prod
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${DATABASE_PASSWORD}
      MYSQL_DATABASE: ${DATABASE_NAME}
      MYSQL_USER: ${DATABASE_USER}
      MYSQL_PASSWORD: ${DATABASE_PASSWORD}
    ports:
      - "127.0.0.1:3307:3306"  # Solo acceso local
    volumes:
      - mysql_data_prod:/var/lib/mysql
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    command: --default-authentication-plugin=mysql_native_password
    networks:
      - reflexo_network_prod
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis para producción
  redis:
    image: redis:7-alpine
    container_name: reflexo_redis_prod
    restart: always
    ports:
      - "127.0.0.1:6379:6379"  # Solo acceso local
    volumes:
      - redis_data_prod:/data
    networks:
      - reflexo_network_prod
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 20s
      retries: 10

  # Aplicación Django para producción
  web:
    build: .
    container_name: reflexo_django_prod
    restart: always
    expose:
      - "8000"  # Solo acceso interno
    volumes:
      - static_volume_prod:/app/staticfiles
      - media_volume_prod:/app/media
      - logs_volume_prod:/app/logs
    environment:
      - DEBUG=False
      - DJANGO_SETTINGS_MODULE=settings.settings
      - DATABASE_HOST=db
      - DATABASE_PORT=3306
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - reflexo_network_prod
    command: >
      sh -c "python manage.py collectstatic --noinput &&
             python manage.py migrate &&
             gunicorn --bind 0.0.0.0:8000 --workers 4 --timeout 120 --max-requests 1000 --max-requests-jitter 100 settings.wsgi:application"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      timeout: 30s
      retries: 3

  # Celery Worker para producción
  celery:
    build: .
    container_name: reflexo_celery_prod
    restart: always
    volumes:
      - logs_volume_prod:/app/logs
    environment:
      - DEBUG=False
      - DJANGO_SETTINGS_MODULE=settings.settings
      - DATABASE_HOST=db
      - DATABASE_PORT=3306
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      web:
        condition: service_healthy
    networks:
      - reflexo_network_prod
    command: celery -A settings worker -l info --concurrency=4 --max-tasks-per-child=1000

  # Celery Beat para producción
  celery-beat:
    build: .
    container_name: reflexo_celery_beat_prod
    restart: always
    volumes:
      - logs_volume_prod:/app/logs
    environment:
      - DEBUG=False
      - DJANGO_SETTINGS_MODULE=settings.settings
      - DATABASE_HOST=db
      - DATABASE_PORT=3306
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      web:
        condition: service_healthy
    networks:
      - reflexo_network_prod
    command: celery -A settings beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler

  # Nginx para producción con SSL
  nginx:
    image: nginx:alpine
    container_name: reflexo_nginx_prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./nginx/default.prod.conf:/etc/nginx/conf.d/default.conf
      - static_volume_prod:/app/staticfiles
      - media_volume_prod:/app/media
      # - ./ssl:/etc/nginx/ssl:ro  # Certificados SSL (comentado hasta configurar SSL)
    depends_on:
      web:
        condition: service_healthy
    networks:
      - reflexo_network_prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health/"]
      timeout: 30s
      retries: 3

volumes:
  mysql_data_prod:
    driver: local
  redis_data_prod:
    driver: local
  static_volume_prod:
    driver: local
  media_volume_prod:
    driver: local
  logs_volume_prod:
    driver: local

networks:
  reflexo_network_prod:
    driver: bridge  # Red interna para mayor seguridad
